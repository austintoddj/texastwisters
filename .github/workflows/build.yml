name: Build & Tests

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Lint, Unit Tests, Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit --if-present

      - name: Build (for verification)
        run: npm run build
        env:
          SENTRY_RELEASE: ${{ github.sha }}

  pr-smoke-e2e:
    name: PR Smoke E2E (fast)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers (if cache miss)
        run: npx playwright install --with-deps

      - name: Run smoke E2E tests (PR)
        run: |
          npx start-server-and-test 'npm run dev' http://localhost:3000 "npx playwright test tests/e2e/smoke.spec.ts --project=chromium --reporter=list"
        env:
          CI: true

  premerge-e2e:
    name: Premerge Full E2E (PR -> main)
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers (if cache miss)
        run: npx playwright install --with-deps

      - name: Build production (premerge)
        run: npm run build
        env:
          SENTRY_RELEASE: ${{ github.sha }}

      # Sentry sourcemaps are uploaded by the Next.js Sentry webpack plugin (withSentryConfig) when
      # the appropriate SENTRY_* secrets are set. Remove manual sentry-cli steps to avoid duplicate uploads.

      - name: Run full Playwright E2E (premerge)
        run: |
          npx start-server-and-test 'npm run start' http://localhost:3000 'npx playwright test --reporter=list'
        env:
          CI: true
