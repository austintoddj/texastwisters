name: Setup runner and run command

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '18'
      install-playwright:
        description: 'Whether to install Playwright browsers'
        required: false
        type: boolean
        default: false
      run-command:
        description: 'Command to run after setup (e.g. "npm run lint")'
        required: true
        type: string
      upload-artifact-path:
        description: 'Path to upload as artifact after the command completes (optional)'
        required: false
        type: string
      upload-artifact-name:
        description: 'Artifact name when uploading (optional)'
        required: false
        type: string
      base-url:
        description: 'Optional base URL to expose as BASE_URL env variable'
        required: false
        type: string
    secrets:
      E2E_BASE_URL:
        required: false

jobs:
  run:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci
        shell: bash

      - name: Cache Playwright browsers
        if: ${{ inputs.install-playwright == true }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        if: ${{ inputs.install-playwright == true }}
        run: npx playwright install --with-deps
        shell: bash

      - name: Run requested command
        run: ${{ inputs.run-command }}
        shell: bash
        env:
          BASE_URL: ${{ inputs.base-url || secrets.E2E_BASE_URL }}

      - name: Diagnose build output (if uploading artifact)
        if: ${{ inputs.upload-artifact-path != '' && inputs.upload-artifact-path != null }}
        run: |
          echo "Checking for files at: '${{ inputs.upload-artifact-path }}'"
          if [ -e "${{ inputs.upload-artifact-path }}" ]; then
            echo "Found path:'${{ inputs.upload-artifact-path }}'"
            ls -la "${{ inputs.upload-artifact-path }}" || true
            echo "Listing up to 200 files under path"
            find "${{ inputs.upload-artifact-path }}" -type f | head -n 200 || true
          else
            echo "Path not found: '${{ inputs.upload-artifact-path }}'"
          fi
        shell: bash

      - name: Archive artifact directory (if it's a directory)
        if: ${{ inputs.upload-artifact-path != '' && inputs.upload-artifact-path != null }}
        run: |
          UPATH="${{ inputs.upload-artifact-path }}"
          ART_NAME="${{ inputs.upload-artifact-name || 'artifact' }}"
          if [ -d "$UPATH" ]; then
            echo "$UPATH is a directory; creating archive at ./artifact-$ART_NAME.tar.gz"
            tar -czf "./artifact-$ART_NAME.tar.gz" -C "$(dirname "$UPATH")" "$(basename "$UPATH")"
            echo "Archive created: ./artifact-$ART_NAME.tar.gz"
          else
            echo "$UPATH is not a directory; skipping archive step"
          fi
        shell: bash

      - name: Upload artifact (if provided)
        # Ensure artifacts are uploaded even when earlier steps fail (e.g. tests fail).
        # `always()` makes this step run regardless of previous step outcome, while
        # still checking that an artifact path was provided.
        if: ${{ always() && inputs.upload-artifact-path != '' && inputs.upload-artifact-path != null }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.upload-artifact-name || 'artifact' }}
          # if archive exists upload that, otherwise upload the path recursively
          path: |
            ./artifact-${{ inputs.upload-artifact-name || 'artifact' }}.tar.gz
            ${{ inputs.upload-artifact-path }}/**
